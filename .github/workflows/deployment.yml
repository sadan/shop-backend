# This workflow is used to build and deploy the new version of application.

name: Deployment
on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: shop-backend
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: etc/ecs-task-definition.json
  CONTAINER_NAME: app

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}
          fetch-depth: '0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_GITHUB }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_GITHUB }}
          role-to-assume: ${{ secrets.AWS_ECR_GITHUB_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.55.0
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          WITH_V: false

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: shop-backend
          IMAGE_TAG: ${{ steps.tag_version.outputs.new_tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . --target=prod
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DATABASE_ENGINE=${{ vars.DJANGO_DATABASE_ENGINE }}
            DATABASE_NAME=${{ vars.DJANGO_DATABASE_NAME }}
            DATABASE_HOST=${{ vars.DJANGO_DATABASE_HOST }}
            DATABASE_PORT=${{ vars.DJANGO_DATABASE_PORT }}
            DATABASE_USER=${{ secrets.DJANGO_DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.DJANGO_DATABASE_PASSWORD }}
            DATABASE_OPTIONS_SSLMODE=${{ vars.DJANGO_DATABASE_OPTIONS_SSLMODE }}

      - name: Deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

#      - name: Create a GitHub release
#        uses: ncipollo/release-action@v1
#        with:
#          tag: ${{ steps.tag_version.outputs.new_tag }}
#          name: Release ${{ steps.tag_version.outputs.new_tag }}
#          body: ${{ steps.tag_version.outputs.changelog }}